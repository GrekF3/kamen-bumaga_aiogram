import asyncio
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

token = 'TOKEN'

storage = MemoryStorage()

bot = Bot(token)

dp = Dispatcher(bot, storage=storage)

Nikita = 539057262
Dasha = 1464660098


class RPS(StatesGroup):

    Nikita_Choise = State()
    Dasha_Choise = State()
    winner = State()



@dp.message_handler(commands=['Start'], state=None)
async def Starter(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ö–∞–º–µ–Ω—åü§ú')
    btn2 = types.KeyboardButton('–ù–æ–∂–Ω–∏—Ü—ã‚úå')
    btn3 = types.KeyboardButton('–ë—É–º–∞–≥–∞‚úã')
    keyboard.add(btn1)
    keyboard.add(btn2)
    keyboard.add(btn3)
    if message.from_user.id == Nikita:
        await bot.send_message(Dasha, '–ó–∞–ø—É—â–µ–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞ –æ—Ç –ù–∏–∫–∏—Ç—ã')
    else:
        await bot.send_message(Nikita,'–ó–∞–ø—É—â–µ–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞ –æ—Ç –î–∞—à–∏')
    await message.answer('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –í–∞—à —Ö–æ–¥:', reply_markup=keyboard)

    if message.from_user.id == Nikita:
        await RPS.Nikita_Choise.set()
    else:
        await RPS.Dasha_Choise.set()

@dp.message_handler(state=RPS.Nikita_Choise)
async def waiter(message: types.Message, state: FSMContext):
    choise = message.text
    await state.update_data(Nikita_Choise=choise)
    await bot.send_message(Nikita, '–ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞')
    await bot.send_message(Dasha, '–ò–≥—Ä–æ–∫ –ù–∏–∫–∏—Ç–∞ —Å–¥–µ–ª–∞–ª —Å–≤–æ–π')
    await asyncio.sleep(3)
    if await Truer() == True:
        await Winner()

@dp.message_handler(state=RPS.Dasha_Choise)
async def waiter(message: types.Message, state: FSMContext):
    choise = message.text
    await state.update_data(Dasha_Choise=choise)
    await bot.send_message(Dasha, '–ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞')
    await bot.send_message(Nikita, '–ò–≥—Ä–æ–∫ –î–∞—à–∞ —Å–¥–µ–ª–∞–ª —Å–≤–æ–π —Ö–æ–¥')
    await asyncio.sleep(3)
    if await Truer() == True:
        await Winner()


async def Truer(NikitaC: FSMContext = dp.current_state(user=Nikita), DashaC: FSMContext = dp.current_state(user=Dasha)):
    try:
        async with NikitaC.proxy() as data:
            Nikita_choise = data['Nikita_Choise']
        async with DashaC.proxy() as data:
            Dasha_Choise = data['Dasha_Choise']
        return True
    except:
        return False



async def Winner(NikitaC: FSMContext = dp.current_state(user=Nikita), DashaC: FSMContext = dp.current_state(user=Dasha)):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('/start')

    async with NikitaC.proxy() as data:
        Nikita_choise = data['Nikita_Choise']
    async with DashaC.proxy() as data:
        Dasha_Choise = data['Dasha_Choise']

    if Nikita_choise == Dasha_Choise:
        msg = '–•–æ–¥ –î–∞—à–∏: ' + Dasha_Choise + '\n–•–æ–¥ –ù–∏–∫–∏—Ç—ã: ' + Nikita_choise + '\n –ù–ò–ß–¨–Ø'
        await bot.send_message(Nikita, msg, reply_markup=markup)
        await bot.send_message(Dasha, msg, reply_markup=markup)
    elif Nikita_choise == '–ö–∞–º–µ–Ω—åü§ú':
        if Dasha_Choise == '–ù–æ–∂–Ω–∏—Ü—ã‚úå':
            msg = '–•–æ–¥ –î–∞—à–∏: ' + Dasha_Choise + '\n–•–æ–¥ –ù–∏–∫–∏—Ç—ã: ' + Nikita_choise + '\n –ù–∏–∫–∏—Ç–∞ –ø–æ–±–µ–¥–∏–ª!'
            await bot.send_message(Nikita, msg, reply_markup=markup)
            await bot.send_message(Dasha, msg, reply_markup=markup)
        else:
            msg = '–•–æ–¥ –î–∞—à–∏: ' + Dasha_Choise + '\n–•–æ–¥ –ù–∏–∫–∏—Ç—ã: ' + Nikita_choise + '\n –î–∞—à–∞ –ø–æ–±–µ–¥–∏–ª–∞!'
            await bot.send_message(Nikita, msg, reply_markup=markup)
            await bot.send_message(Dasha, msg, reply_markup=markup)
    elif Nikita_choise == '–ë—É–º–∞–≥–∞‚úã':
        if Dasha_Choise == '–ö–∞–º–µ–Ω—åü§ú':
            msg = '–•–æ–¥ –î–∞—à–∏: ' + Dasha_Choise + '\n–•–æ–¥ –ù–∏–∫–∏—Ç—ã: ' + Nikita_choise + '\n –ù–∏–∫–∏—Ç–∞ –ø–æ–±–µ–¥–∏–ª!'
            await bot.send_message(Nikita, msg, reply_markup=markup)
            await bot.send_message(Dasha, msg, reply_markup=markup)
        else:
            msg = '–•–æ–¥ –î–∞—à–∏: ' + Dasha_Choise + '\n–•–æ–¥ –ù–∏–∫–∏—Ç—ã: ' + Nikita_choise + '\n –î–∞—à–∞ –ø–æ–±–µ–¥–∏–ª–∞!'
            await bot.send_message(Nikita, msg, reply_markup=markup)
            await bot.send_message(Dasha, msg, reply_markup=markup)
    elif Nikita_choise == '–ë—É–º–∞–≥–∞‚úã':
        if Dasha_Choise == '–ù–æ–∂–Ω–∏—Ü—ã‚úå':
            msg = '–•–æ–¥ –î–∞—à–∏: ' + Dasha_Choise + '\n–•–æ–¥ –ù–∏–∫–∏—Ç—ã: ' + Nikita_choise + '\n –î–∞—à–∞ –ø–æ–±–µ–¥–∏–ª–∞!'
            await bot.send_message(Nikita, msg, reply_markup=markup)
            await bot.send_message(Dasha, msg, reply_markup=markup)
        else:
            msg = '–•–æ–¥ –î–∞—à–∏: ' + Dasha_Choise + '\n–•–æ–¥ –ù–∏–∫–∏—Ç—ã: ' + Nikita_choise + '\n –ù–∏–∫–∏—Ç–∞ –ø–æ–±–µ–¥–∏–ª!'
            await bot.send_message(Nikita, msg, reply_markup=markup)
            await bot.send_message(Dasha, msg, reply_markup=markup)
    else:
        await bot.send_message(Nikita, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ù–∏–∫–∏—Ç–∞ —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è!', reply_markup=markup)
        await bot.send_message(Dasha, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ù–∏–∫–∏—Ç–∞ —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è!', reply_markup=markup)

    await NikitaC.finish()
    await DashaC.finish()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)